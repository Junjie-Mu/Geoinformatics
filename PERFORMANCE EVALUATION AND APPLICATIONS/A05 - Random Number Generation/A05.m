%MU JUNJIE ASSIGNMENT5
clear all

%1 Linear Congruent Generator
m = 2^32;
a = 1664525;
c = 1013904223;
seed = 521191478;
N = 10000;
Un = zeros(1,N);
Xn = zeros(1,N);
Xn(1) = seed;
Un(1) = Xn(1)/m;
for i = 2:N
    Xn(i) = mod(a*Xn(i-1) + c, m);
    Un(i) = Xn(i)/m;
end
fprintf("First sample generated by the Linear Congruent Generator %f\n", Un(1));
fprintf("Second sample generated by the Linear Congruent Generator %f\n", Un(2));
fprintf("Third sample generated by the Linear Congruent Generator %f\n", Un(3));
%2.a Exponential distribution
N1 = 10000;
lambda_e = 0.1;
En = zeros(1,N1);
for i = 1:N1
    En(i) = -log(Un(i))/lambda_e;
end

%2.b Pareto distribution
N2 = 10000;
a_p = 1.5;
m_p = 5;
Pn = zeros(1,N2);
for i = 1:N2
    Pn(i) = m_p/(Un(i)^(1/a_p));
end

%2.c Erlang distribution
N3 = 2500;
k = 4;
lambda_m = 0.4;
ERn = zeros(1,N3);
for i = 1:N3
    ERn(i) = sum(-log(Un((i-1)*k+1:i*k)) / lambda_m);
end

%2.d Hypo-Exponential
N4 = 5000;
lambda_Hypo1 = 0.5;
lambda_Hypo2 = 0.125;
Hypo_n = -log(Un(1:N4))/lambda_Hypo1 -log(Un(N4+1:end))/lambda_Hypo2;


%2.e Hyper-Exponential
N5 = 5000;
lambda_Hyper1 = 0.5;
lambda_Hyper2 = 0.05;
p1 = 0.55;
Hyper_n=zeros(1,N5);
for i = 1:N5
    if  Un(i)<p1
        Hyper_n(i) = -log(Un(i+5000))/lambda_Hyper1;
    else
        Hyper_n(i) = -log(Un(i+5000))/lambda_Hyper2;
    end
end

%3 Compare Empirical distribution and real distribution
%Uniform
figure(1)
plot(sort(Un),[1:N]/N,'b:','LineWidth',1.5,'DisplayName','Empirical');
title('Uniform');
xlabel('Value');
ylabel('CDF');
hold on;
t = linspace(0, 1, N);
F_Un = t;
plot(t,F_Un,'r','LineWidth',1,'DisplayName','Real');
legend();
hold off;
%Exponential
figure(2)
En_edge = En(En<25);
N11 = length(En_edge);
plot(sort(En_edge),[1:N11]/N11,'b:','LineWidth',1.5,'DisplayName','Empirical');
title('Exponential');
xlabel('Value');
ylabel('CDF');
hold on;
t = linspace(0, 25, N11);
F_En = 1 - exp(-lambda_e*t);
plot(t,F_En,'r','LineWidth',1,'DisplayName','Real');
legend();
hold off;
%Pareto
figure(3)
Pn_edge = Pn(Pn<25);
N21 = length(Pn_edge);
plot(sort(Pn_edge),[1:N21]/N21,'b:','LineWidth',1.5,'DisplayName','Empirical');
title('Pareto');
xlabel('Value');
ylabel('CDF');
hold on;
t = linspace(5, 25, N21);
F_Pn = 1 - (m_p ./ t).^a_p;
plot(t,F_Pn,'r','LineWidth',1,'DisplayName','Real');
legend();
hold off;
%Erlang
figure(4)
ERn_edge = ERn(ERn<25);
N31 = length(ERn_edge);
plot(sort(ERn_edge),[1:N31]/N31,'b:','LineWidth',1.5,'DisplayName','Empirical');
title('Erlang');
xlabel('Value');
ylabel('CDF');
hold on;
t = linspace(0, 25, N31);
F_ERn = 1 - gammainc(k, lambda_m * t);
plot(t,F_ERn,'r','LineWidth',1,'DisplayName','Real');
legend();
hold off;
%Hypo-Exponential
figure(5)
Hypo_n_edge = Hypo_n(Hypo_n<25);
N41 = length(Hypo_n_edge);
plot(sort(Hypo_n_edge),[1:N41]/N41,'b:','LineWidth',1.5,'DisplayName','Empirical');
title('Hypo-Exponential');
xlabel('Value');
ylabel('CDF');
hold on;
t = linspace(0, 25, N41);
F_Hypo = 1 - lambda_Hypo2*exp(-lambda_Hypo1*t)/(lambda_Hypo2-lambda_Hypo1) +lambda_Hypo1*exp(-lambda_Hypo2*t)/(lambda_Hypo2-lambda_Hypo1);
plot(t,F_Hypo,'r','LineWidth',1,'DisplayName','Real');
legend();
hold off;
%Hyper-Exponential
figure(6)
Hyper_n_edge = Hyper_n(Hyper_n<25);
N51 = length(Hyper_n_edge);
plot(sort(Hyper_n_edge),[1:N51]/N51,'b:','LineWidth',1.5,'DisplayName','Empirical');
title('Hyper-Exponential');
xlabel('Value');
ylabel('CDF');
hold on;
t = linspace(0, 25, N51);
%F_Hyper = 1 - lambda_Hyper1*p1*exp(-lambda_Hyper1*t) - lambda_Hyper2*(1-p1)*exp(-lambda_Hyper2*t);
F_Hyper =1 - p1* exp(-lambda_Hyper1*t )- (1-p1) * exp(-lambda_Hyper2*t);
plot(t,F_Hyper,'r','LineWidth',1,'DisplayName','Real');
legend();
hold off;


%4 Total cost for storing the files
scenarios = {En; Pn; ERn; Hypo_n; Hyper_n};
for i = 1:size(scenarios)
    file = scenarios{i};
    storage = zeros(1, length(file));
    for j = 1:length(file)
        if file(j) < 10
            storage(j) = file(j) * 0.01;
        else
            storage(j) = file(j) * 0.02;
        end
    end
    total_cost = sum(storage);
    fprintf("Total Charge for storing the files whose length is expressed is %f\n", total_cost);
end


